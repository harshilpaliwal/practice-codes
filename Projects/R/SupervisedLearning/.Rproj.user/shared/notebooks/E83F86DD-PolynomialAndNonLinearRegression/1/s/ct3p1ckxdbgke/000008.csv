"0","#Use 12-fold cross validation to determine which of the 6 methods has the lowest out-of-sample MSE"
"0",""
"0","#1. create an mse function"
"0","mse <- function(predictedValue, trueValue){"
"0","  mean((predictedValue - trueValue)^2)"
"0","}"
"0",""
"0","#2. creating the 12 fold dataset"
"0","boston_12fold <- Boston %>% mutate(split = sample(rep(1:12, length.out = nrow(Boston))))"
"0",""
"0","#3. creating the output matrix with 12 rows and 6 columns"
"0","output_matrix <- matrix(nrow = 12, ncol = 6)"
"0","colnames(output_matrix) <- c(""Linear"", ""Polynomial"", ""Piecewise Constant"", ""Piecewise Cubic"", ""Cubic Spline"", ""Natural Cubic Spline"")"
"0",""
"0","#4. creating models and getting mses"
"0","for(i in 1:12){"
"0","  train <- boston_12fold %>% filter(split != i)"
"0","  test <- boston_12fold %>% filter(split == i)"
"0","  "
"0","  brks <- c(-Inf, 7, 15, 22, Inf)"
"0","  "
"0","  linear <- lm(medv ~ lstat, data = train)"
"0","  polynomial <- lm(medv ~ poly(lstat, 3), data = train)"
"0","  piece_constant <- lm(medv ~ cut(lstat, brks), data = train)"
"0","  piece_cubic <- lm(medv ~ piecewise_cubic_basis(lstat, 3), data = train)"
"0","  cubic_spline <- lm(medv ~bs(lstat, knots = median(lstat)), data = train)"
"0","  natural_cubic_spline <- lm(medv ~ ns(lstat, df = 3), data = train)"
"0","  "
"0","  output_matrix [i, ] <- c("
"0","    mse(test$medv, predict(linear, newdata = test)),"
"0","    mse(test$medv, predict(polynomial, newdata = test)),"
"0","    mse(test$medv, predict(piece_constant, newdata = test)),"
"0","    mse(test$medv, predict(piece_cubic, newdata = test)),"
"0","    mse(test$medv, predict(cubic_spline, newdata = test)),"
"0","    mse(test$medv, predict(natural_cubic_spline, newdata = test))"
"0","  )"
"0","}"
"2","some 'x' values beyond boundary knots may cause ill-conditioned bases"
"0","#this is the comparison of the methods"
"0","colMeans(output_matrix)"
"1","              Linear "
"1","          Polynomial "
"1","  Piecewise Constant "
"1","     Piecewise Cubic "
"1","        Cubic Spline "
"1","Natural Cubic Spline "
"1","
"
"1","            38.81066 "
"1","            29.30436 "
"1","            37.98858 "
"1","            28.82294 "
"1","            27.40212 "
"1","            28.63200 "
"1","
"
"0","#graph"
"0","tibble(names = as_factor(colnames(output_matrix)), "
"0","       mse   = colMeans(output_matrix)) %>% "
"0","  ggplot(aes(x = names, y = mse, fill = names)) +"
"0","  geom_bar(stat = ""identity"") +"
"0","  theme_minimal() +"
"0","  scale_fill_viridis_d(guide = ""none"") +"
"0","  labs("
"0","    x     = ""Method"", "
"0","    y     = ""Mean squared error"", "
"0","    title = ""Comparing regression method prediction performance"""
"0","  )"
"0",""
