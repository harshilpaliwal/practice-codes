library(ISLR)
library(tidyverse)
library(dplyr)
library(pROC)
library(rpart)
library(rpart.plot)
library(randomForest)
set.seed(45)
#Load the dataset bees.csv and split it into a training (80%) and test set (20%). Use the training set for EDA and model development. [1 point]
bees <- read.csv("~/Programming/R/Data Analysis and Visualisation/Assignments/6776566_DAV_Exam/bees.csv")
splits <- c(rep("train", 3806), rep("test", 952))
bees = bees %>% mutate(splits = sample(splits))
training_set <- bees%>%filter(splits == "train")
test_set <- bees%>%filter(splits == "test")
#Which country suffered the highest winter mortality this year? [1 point]
unique(bees %>% filter(Winter_mortality == max(Winter_mortality)) %>% dplyr::select(Country))
#Which country experienced the highest rate of CCD? (HINT: use Winter_mortality to work out if CCD occured) [1 point]
#function to generate a linear model and calculate MSE
ccd_bees <-
bees %>%
mutate(CCD = ifelse(Winter_mortality == "100", 1, 0))
ccd_bees <- ccd_bees %>% mutate(as.factor(1:4758))
training_set <- ccd_bees%>%filter(splits == "train")
test_set <- ccd_bees%>%filter(splits == "test")
unique(training_set %>%
filter(Winter_mortality == max(Winter_mortality)) %>%
dplyr::select(Country))
#Use logistic regression to predict CCD from the other features in the dataset. (HINT: add the previously calculated feature to the dataset) [2 points]
log_reg <- glm(CCD ~ ., "binomial", training_set)
#5. Show the confusion matrix of predictions from your model, for the test data. [2 points]
prob_lr <- predict(log_reg, type = "response")
#6. What are the accuracy, recall, and precision of your model? [1 points]
cmat_lr <- table(true = test_set$CCD, pred = pred_lr)
#Which country experienced the highest rate of CCD? (HINT: use Winter_mortality to work out if CCD occured) [1 point]
#function to generate a linear model and calculate MSE
ccd_bees <-
bees %>%
mutate(CCD = ifelse(Winter_mortality == "100", 1, 0))
ccd_bees <- ccd_bees %>% mutate(as.factor(1:4758))
training_set <- ccd_bees%>%filter(splits == "train")
test_set <- ccd_bees%>%filter(splits == "test")
unique(training_set %>%
filter(Winter_mortality == max(Winter_mortality)) %>%
dplyr::select(Country))
#Use logistic regression to predict CCD from the other features in the dataset. (HINT: add the previously calculated feature to the dataset) [2 points]
log_reg <- glm(CCD ~ ., "binomial", training_set)
#Which country experienced the highest rate of CCD? (HINT: use Winter_mortality to work out if CCD occured) [1 point]
#function to generate a linear model and calculate MSE
ccd_bees <-
bees %>%
mutate(CCD = ifelse(Winter_mortality == "100", 1, 0))
training_set <- ccd_bees%>%filter(splits == "train")
test_set <- ccd_bees%>%filter(splits == "test")
unique(training_set %>%
filter(Winter_mortality == max(Winter_mortality)) %>%
dplyr::select(Country))
#Use logistic regression to predict CCD from the other features in the dataset. (HINT: add the previously calculated feature to the dataset) [2 points]
log_reg <- glm(CCD ~ ., "binomial", training_set)
#Use logistic regression to predict CCD from the other features in the dataset. (HINT: add the previously calculated feature to the dataset) [2 points]
log_reg <- glm(CCD ~ ., "binomial", training_set)
#Use logistic regression to predict CCD from the other features in the dataset. (HINT: add the previously calculated feature to the dataset) [2 points]
log_reg <- glm(CCD ~ ., "binomial", training_set)
#Use logistic regression to predict CCD from the other features in the dataset. (HINT: add the previously calculated feature to the dataset) [2 points]
log_reg <- glm(CCD ~ ., "binomial", training_set)
#Use logistic regression to predict CCD from the other features in the dataset. (HINT: add the previously calculated feature to the dataset) [2 points]
log_reg <- glm(CCD ~ ., "binomial", training_set)
#Use logistic regression to predict CCD from the other features in the dataset. (HINT: add the previously calculated feature to the dataset) [2 points]
log_reg <- glm(CCD ~ ., "binomial", training_set)
#Which country experienced the highest rate of CCD? (HINT: use Winter_mortality to work out if CCD occured) [1 point]
#function to generate a linear model and calculate MSE
ccd_bees <-
bees %>%
mutate(CCD = ifelse(Winter_mortality == "100", 1, 0))
ccd_bees <- ccd_bees %>% mutate(as.factor(1:4758))
training_set <- ccd_bees%>%filter(splits == "train")
test_set <- ccd_bees%>%filter(splits == "test")
unique(training_set %>%
filter(Winter_mortality == max(Winter_mortality)) %>%
dplyr::select(Country))
#Use logistic regression to predict CCD from the other features in the dataset. (HINT: add the previously calculated feature to the dataset) [2 points]
log_reg <- glm(CCD ~ ., "binomial", training_set)
#Use logistic regression to predict CCD from the other features in the dataset. (HINT: add the previously calculated feature to the dataset) [2 points]
log_reg <- glm(CCD ~ ., "binomial", training_set)
#Use logistic regression to predict CCD from the other features in the dataset. (HINT: add the previously calculated feature to the dataset) [2 points]
log_reg <- glm(CCD ~ ., "binomial", training_set)
#Use logistic regression to predict CCD from the other features in the dataset. (HINT: add the previously calculated feature to the dataset) [2 points]
log_reg <- glm(CCD ~ ., "binomial", training_set)
#Which country experienced the highest rate of CCD? (HINT: use Winter_mortality to work out if CCD occured) [1 point]
#function to generate a linear model and calculate MSE
ccd_bees <-
bees %>%
mutate(CCD = ifelse(Winter_mortality == "100", 1, 0))
ccd_bees <- ccd_bees %>% mutate(
Age = as.factor(Age),
Activity = as.factor(Activity),
Beekeep_for = as.factor(Beekeep_for),
Qualif = as.factor(Qualif),
Training = as.factor(Training),
Coop_treat = as.factor(Coop_treat),
Bee_population_size = as.factor(Bee_population_size),
Apiary_Size = as.factor(Apiary_Size),
Production = as.factor(Production),
Apiarist_book = as.factor(Apiarist_book),
Org_member = as.factor(Org_member),
Continue = as.factor(Continue),
Breed = as.factor(Breed),
Chronic_Depop = as.factor(Chronic_Depop),
ChronicParalysisV1 = as.factor(ChronicParalysisV1),
ClinSign_Brood = as.factor(ClinSign_Brood),
ClinSign_Honeybees = as.factor(ClinSign_Honeybees),
H_Rate_ColMortality = as.factor(H_Rate_ColMortality),
H_Rate_HoneyMortality = as.factor(H_Rate_HoneyMortality),
OtherEvent = as.factor(OtherEvent),
VarroaMites = as.factor(VarroaMites),
VarroosisV1 = as.factor(VarroosisV1),
Queen_bought = as.factor(Queen_bought),
Queen_produced = as.factor(Queen_produced),
QueenProblems = as.factor(QueenProblems),
Management = as.factor(Management),
Swarm_bought = as.factor(Swarm_bought),
Swarm_produced = as.factor(Swarm_produced),
)
training_set <- ccd_bees%>%filter(splits == "train")
test_set <- ccd_bees%>%filter(splits == "test")
unique(training_set %>%
filter(Winter_mortality == max(Winter_mortality)) %>%
dplyr::select(Country))
#Use logistic regression to predict CCD from the other features in the dataset. (HINT: add the previously calculated feature to the dataset) [2 points]
log_reg <- glm(CCD ~ ., "binomial", training_set)
#Use logistic regression to predict CCD from the other features in the dataset. (HINT: add the previously calculated feature to the dataset) [2 points]
log_reg <- glm(CCD ~ ., "binomial", training_set)
#Use logistic regression to predict CCD from the other features in the dataset. (HINT: add the previously calculated feature to the dataset) [2 points]
log_reg <- glm(CCD ~ ., "binomial", training_set)
#Use logistic regression to predict CCD from the other features in the dataset. (HINT: add the previously calculated feature to the dataset) [2 points]
log_reg <- glm(CCD ~ ., "binomial", training_set)
#Use logistic regression to predict CCD from the other features in the dataset. (HINT: add the previously calculated feature to the dataset) [2 points]
log_reg <- glm(CCD ~ ., "binomial", training_set)
#5. Show the confusion matrix of predictions from your model, for the test data. [2 points]
prob_lr <- predict(log_reg, type = "response")
#Which country experienced the highest rate of CCD? (HINT: use Winter_mortality to work out if CCD occured) [1 point]
#function to generate a linear model and calculate MSE
ccd_bees <-
bees %>%
mutate(CCD = ifelse(Winter_mortality == "100", 1, 0))
ccd_bees <- ccd_bees %>% mutate(as.factor(1:4758))
training_set <- ccd_bees%>%filter(splits == "train")
test_set <- ccd_bees%>%filter(splits == "test")
unique(training_set %>%
filter(Winter_mortality == max(Winter_mortality)) %>%
dplyr::select(Country))
#Use logistic regression to predict CCD from the other features in the dataset. (HINT: add the previously calculated feature to the dataset) [2 points]
log_reg <- glm(CCD ~ ., "binomial", training_set)
View(ccd_bees)
#Use logistic regression to predict CCD from the other features in the dataset. (HINT: add the previously calculated feature to the dataset) [2 points]
log_reg <- glm(CCD ~ Age + Beekeep_for, "binomial", training_set)
#5. Show the confusion matrix of predictions from your model, for the test data. [2 points]
prob_lr <- predict(log_reg, type = "response")
pred_lr <- ifelse(prob_lr > 1, 0)
#5. Show the confusion matrix of predictions from your model, for the test data. [2 points]
prob_lr <- predict(log_reg, type = "response")
pred_lr <- ifelse(prob_lr > 1, 0)
#5. Show the confusion matrix of predictions from your model, for the test data. [2 points]
prob_lr <- predict(log_reg, type = "response")
pred_lr <- ifelse(prob_lr > 0.5, 1, 0)
table(true = test_set$CCD, pred = pred_lr)
#5. Show the confusion matrix of predictions from your model, for the test data. [2 points]
prob_lr <- predict(log_reg, type = "response")
pred_lr <- ifelse(prob_lr > 0.5, 1, 0)
length(pred_lr)
table(true = test_set$CCD, pred = pred_lr)
#5. Show the confusion matrix of predictions from your model, for the test data. [2 points]
log_reg <- glm(CCD ~ Age + Beekeep_for, "binomial", test_set)
prob_lr <- predict(log_reg, type = "response")
pred_lr <- ifelse(prob_lr > 0.5, 1, 0)
table(true = test_set$CCD, pred = pred_lr)
#6. What are the accuracy, recall, and precision of your model? [1 points]
cmat_lr <- table(true = test_set$CCD, pred = pred_lr)
TN <- cmat_lr[1, 1]
FN <- cmat_lr[2, 1]
FP <- cmat_lr[1, 2]
#Use logistic regression to predict CCD from the other features in the dataset. (HINT: add the previously calculated feature to the dataset) [2 points]
log_reg <- glm(CCD ~ Age + Beekeep_for, "binomial", training_set)
#5. Show the confusion matrix of predictions from your model, for the test data. [2 points]
prob_lr <- predict(log_reg, type = "response")
pred_lr <- ifelse(prob_lr > 0.5, 1, 0)
table(true = training_set$CCD, pred = pred_lr)
#6. What are the accuracy, recall, and precision of your model? [1 points]
cmat_lr <- table(true = test_set$CCD, pred = pred_lr)
#5. Show the confusion matrix of predictions from your model, for the test data. [2 points]
log_reg <- glm(CCD ~ Age + Beekeep_for, "binomial", test_set)
prob_lr <- predict(log_reg, type = "response")
pred_lr <- ifelse(prob_lr > 0.5, 1, 0)
table(true = test_set$CCD, pred = pred_lr)
#5. Show the confusion matrix of predictions from your model, for the test data. [2 points]
log_reg <- glm(CCD ~ Age + Beekeep_for, "binomial", test_set)
prob_lr <- predict(log_reg, type = "response")
pred_lr <- ifelse(prob_lr >  1, 0)
#5. Show the confusion matrix of predictions from your model, for the test data. [2 points]
log_reg <- glm(CCD ~ Age + Beekeep_for, "binomial", test_set)
prob_lr <- predict(log_reg, type = "response")
pred_lr <- ifelse(prob_lr > 0.5, 1, 0)
table(true = test_set$CCD, pred = pred_lr)
#5. Show the confusion matrix of predictions from your model, for the test data. [2 points]
log_reg <- glm(CCD ~ Age + Beekeep_for, "binomial", test_set)
prob_lr <- predict(log_reg, type = "response")
pred_lr <- ifelse(prob_lr > 0.5, 1, 0)
pred_lr
table(true = test_set$CCD, pred = pred_lr)
#6. What are the accuracy, recall, and precision of your model? [1 points]
cmat_lr <- table(true = test_set$CCD, pred = pred_lr)
TN <- cmat_lr[1, 1]
FN <- cmat_lr[2, 1]
FP <- cmat_lr[1, 2]
#6. What are the accuracy, recall, and precision of your model? [1 points]
cmat_lr <- table(true = test_set$CCD, pred = pred_lr)
TN <- cmat_lr[1, 1]
FN <- cmat_lr[2, 1]
TP <- cmat_lr[2, 2]
#5. Show the confusion matrix of predictions from your model, for the test data. [2 points]
log_reg <- glm(CCD ~ Age + Beekeep_for, "binomial", test_set)
prob_lr <- predict(log_reg, type = "response")
pred_lr <- ifelse(prob_lr > 0.5, 1, 0)
pred_lr
table(true = test_set$CCD, pred = pred_lr)
#5. Show the confusion matrix of predictions from your model, for the test data. [2 points]
log_reg <- glm(CCD ~ Age + Beekeep_for, "binomial", test_set)
prob_lr <- predict(log_reg, type = "response")
pred_lr <- ifelse(prob_lr > 0.5, 1, 0)
table(true = test_set$CCD, pred = pred_lr)
